{
  "include": ["src"],
  "compilerOptions": {
    "outDir": "build",
    "target": "ES6",
    "lib": ["ES6", "DOM"],
    "strict": true,
    "allowJs": true
  }
}
/* 
앞서서 Lib의 정의의인
Specify a set of bundled library declaration files that describe the target runtime environment.
이거 중에서 that describe the target runtime environment.는 우리가 적은 코드가 어느 환경에서 돌아가는지를 정의해 두었다는 것을 알 수 있었다.
그 정의는 그 앞 부분인 bundled library declaration files에 되어있는데,
그 declaration files는 아래와 같다.
*/

// 타입 정의
/* 
우리가 타입스크립트를 사용하는 목적과 연결되어 있는데, 대부분 라이브러리는 js로 만들어졌다. 
그래서 우리가 이걸 ts프로젝트에서 쓰려면, ts에게 우리가 불러올 자바스크립트 함수의 모양을 설명하려면, 
보호와 자동완성 기능을 사용하기 위해서 설명하려면, js함수의 모양, 더 나아가서는 라이브러리, 패키지의 타입 정의가 필요하다.
이 역할을 해주는 것이 정의 파일이다. 즉 자바스크립트가 어떤 타입을 가진다는 것을 타입스크립트에게 설명해주는 파일이다.

지난 시간에 구동 환경에 따라 타입스크립트는 우리에게 어떤 자동완성 기능을 제공해야 하는지를 알게 된다.
이렇게 자동완성 기능은 d.ts라는 '정의 파일'을 가지고 있기에 가능하다.

우리는 d.ts의 정의 파일에서 호출 시그니처, 그러니까 타입만 써주면 된다. 콜 시그니처를 만들어 주는 것이다.
d.ts에는 그렇게 구성된다. 다른 관점에서 보면 타입스크립트가 단지 d.ts를 읽어줄 뿐이다.

이번 시간에는 node_modules에 설치된 자바스크립트 모듈을 어떻게 사용하는지에 대해 알아봤다. (자바스크립트를 d.ts에서 타입해서 타입스크립트에서 사용하기)
d.ts로 모듈의 타입을 정의해서 사용을 했었다.
*/

/* 
allowJS를 하면 call signature를 추론하는데, js파일과 ts파일을 섞어서 프로젝트를 진행해도 괜찮지만
타입스크립트 파일이 자바스크립트 파일을 확인하게도 하고 싶고 완전히 타입스크립트로 모조리 바꾸고 싶지는 않다면 JSDoc라는 것이 있다.

타입스크립트 보호를 조금 받고 싶다면, 희소식은 타입스크립트는 끝내주기 때문에 자바스크립트 파일도 보호해준다는 것이다.
*/

// @ts-check
/* 
타입스크립트 파일에게 자바스크립트 파일을 확인하라고 해주는 것이다.
JSDoc은 쉽게 말해서 코멘트로 이루어진 문법이다. 함수 바로 위에 코멘트를 적어주면 된다.
*/
